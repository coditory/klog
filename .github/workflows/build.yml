name: Build

on:
  pull_request:
  push:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          cache: gradle
          distribution: temurin

      - name: Build
        run: ./gradlew build

      - name: Publish Test Report
        if: success() || failure()  # run this step even if previous step failed
        uses: dorny/test-reporter@v1
        with:
          name: Kotest report
          path: ./**/build/test-results/test/*.xml
          reporter: java-junit

      - name: Publish Coverage Report
        uses: codecov/codecov-action@v3
        if: github.repository == 'coditory/klog' && github.ref == 'refs/heads/main'
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          override_commit: ${{ github.event.workflow_run.head_sha }}
          override_branch: ${{ github.event.workflow_run.head_branch }}
          override_build: ${{ github.event.workflow_run.id }}
          files: 'build/reports/kover/report.xml'

      - name: Import GPG Key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v5
        if: |
          github.repository == 'coditory/klog' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_committer_name: Coditory Bot
          git_committer_email: bot@coditory.com

      - name: Publish Snapshot
        if: github.repository == 'coditory/klog' && github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        env:
          SIGNING_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          SIGNING_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: ./gradlew publishJvmPublicationToSnapshotRepository

      - name: Publish Release
        id: publish-release
        if: github.repository == 'coditory/klog' && startsWith(github.ref, 'refs/tags/v') && (github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch')
        env:
          SIGNING_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          SIGNING_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          declare -r RELEASE_VERSION="$([[ "$RELEASE_TAG_NAME" =~ v.* ]] \
            && (echo "$TAG_NAME" | cut -c2-) \
            || echo "$TAG_NAME")"
          declare -r VERSION_ARG="$([ -n "$RELEASE_VERSION" ] \
            && echo "-Pversion=$RELEASE_VERSION" \
            || echo "")"
          ./gradlew publishJvmPublicationToReleaseRepository $VERSION_ARG

      - name: Generate Release Notes
        id: generate-release-notes
        if: steps.publish-release.conclusion == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          declare -r NOTES="$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/generate-notes \
            -f target_commitish='main' \
            | jq -r '.body')"
          declare -r ESCAPED="${NOTES//$'\n'/'%0A'}"
          echo "notes=$ESCAPED" >> $GITHUB_OUTPUT

      - name: Create github release (main only)
        if: steps.generate-release-notes.conclusion == 'success'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          body: ${{ steps.notes.outputs.notes }}
          tag: v${{ steps.versions.outputs.next_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
